print(confusion_mat)
sum(preds_2 == test$OUTCOME) / length(test$OUTCOME)
parsnip_2 <- rand_forest(mtry = 5) |>
set_engine("ranger") |>
set_mode("classification")
workflow_2 <- workflow()
workflow_2 <- workflow_2 |>
add_model(parsnip_2) |>
add_recipe(recipe_1)
fit_2 <- workflow_2 |>
fit(train)
preds_2 <- fit_2 |>
predict(test, type = "class") |>
pull(.pred_class)
confusion_mat = as.matrix(table(Actual_Values = test$OUTCOME, Predicted_Values = preds_2))
print(confusion_mat)
sum(preds_2 == test$OUTCOME) / length(test$OUTCOME)
parsnip_2 <- rand_forest(mtry = 12) |>
set_engine("ranger") |>
set_mode("classification")
workflow_2 <- workflow()
workflow_2 <- workflow_2 |>
add_model(parsnip_2) |>
add_recipe(recipe_1)
fit_2 <- workflow_2 |>
fit(train)
preds_2 <- fit_2 |>
predict(test, type = "class") |>
pull(.pred_class)
confusion_mat = as.matrix(table(Actual_Values = test$OUTCOME, Predicted_Values = preds_2))
print(confusion_mat)
sum(preds_2 == test$OUTCOME) / length(test$OUTCOME)
parsnip_2 <- rand_forest(mtry = 15) |>
set_engine("ranger") |>
set_mode("classification")
workflow_2 <- workflow()
workflow_2 <- workflow_2 |>
add_model(parsnip_2) |>
add_recipe(recipe_1)
fit_2 <- workflow_2 |>
fit(train)
preds_2 <- fit_2 |>
predict(test, type = "class") |>
pull(.pred_class)
confusion_mat = as.matrix(table(Actual_Values = test$OUTCOME, Predicted_Values = preds_2))
print(confusion_mat)
sum(preds_2 == test$OUTCOME) / length(test$OUTCOME)
parsnip_2 <- rand_forest(mtry = 15, trees = 5) |>
set_engine("ranger") |>
set_mode("classification")
workflow_2 <- workflow()
workflow_2 <- workflow_2 |>
add_model(parsnip_2) |>
add_recipe(recipe_1)
fit_2 <- workflow_2 |>
fit(train)
preds_2 <- fit_2 |>
predict(test, type = "class") |>
pull(.pred_class)
confusion_mat = as.matrix(table(Actual_Values = test$OUTCOME, Predicted_Values = preds_2))
print(confusion_mat)
sum(preds_2 == test$OUTCOME) / length(test$OUTCOME)
parsnip_2 <- rand_forest(mtry = 15, trees = 10) |>
set_engine("ranger") |>
set_mode("classification")
workflow_2 <- workflow()
workflow_2 <- workflow_2 |>
add_model(parsnip_2) |>
add_recipe(recipe_1)
fit_2 <- workflow_2 |>
fit(train)
preds_2 <- fit_2 |>
predict(test, type = "class") |>
pull(.pred_class)
confusion_mat = as.matrix(table(Actual_Values = test$OUTCOME, Predicted_Values = preds_2))
print(confusion_mat)
sum(preds_2 == test$OUTCOME) / length(test$OUTCOME)
parsnip_2 <- rand_forest(mtry = 15, trees = 20) |>
set_engine("ranger") |>
set_mode("classification")
workflow_2 <- workflow()
workflow_2 <- workflow_2 |>
add_model(parsnip_2) |>
add_recipe(recipe_1)
fit_2 <- workflow_2 |>
fit(train)
preds_2 <- fit_2 |>
predict(test, type = "class") |>
pull(.pred_class)
confusion_mat = as.matrix(table(Actual_Values = test$OUTCOME, Predicted_Values = preds_2))
print(confusion_mat)
sum(preds_2 == test$OUTCOME) / length(test$OUTCOME)
parsnip_2 <- rand_forest(mtry = 15, trees = 25) |>
set_engine("ranger") |>
set_mode("classification")
workflow_2 <- workflow()
workflow_2 <- workflow_2 |>
add_model(parsnip_2) |>
add_recipe(recipe_1)
fit_2 <- workflow_2 |>
fit(train)
preds_2 <- fit_2 |>
predict(test, type = "class") |>
pull(.pred_class)
confusion_mat = as.matrix(table(Actual_Values = test$OUTCOME, Predicted_Values = preds_2))
print(confusion_mat)
sum(preds_2 == test$OUTCOME) / length(test$OUTCOME)
parsnip_2 <- rand_forest(mtry = 15, trees = 50) |>
set_engine("ranger") |>
set_mode("classification")
workflow_2 <- workflow()
workflow_2 <- workflow_2 |>
add_model(parsnip_2) |>
add_recipe(recipe_1)
fit_2 <- workflow_2 |>
fit(train)
preds_2 <- fit_2 |>
predict(test, type = "class") |>
pull(.pred_class)
confusion_mat = as.matrix(table(Actual_Values = test$OUTCOME, Predicted_Values = preds_2))
print(confusion_mat)
sum(preds_2 == test$OUTCOME) / length(test$OUTCOME)
parsnip_2 <- rand_forest(mtry = 15, trees = 25) |>
set_engine("ranger") |>
set_mode("classification")
workflow_2 <- workflow()
workflow_2 <- workflow_2 |>
add_model(parsnip_2) |>
add_recipe(recipe_1)
fit_2 <- workflow_2 |>
fit(train)
preds_2 <- fit_2 |>
predict(test, type = "class") |>
pull(.pred_class)
confusion_mat = as.matrix(table(Actual_Values = test$OUTCOME, Predicted_Values = preds_2))
print(confusion_mat)
sum(preds_2 == test$OUTCOME) / length(test$OUTCOME)
parsnip_2 <- rand_forest(mtry = 15, trees = 20) |>
set_engine("ranger") |>
set_mode("classification")
workflow_2 <- workflow()
workflow_2 <- workflow_2 |>
add_model(parsnip_2) |>
add_recipe(recipe_1)
fit_2 <- workflow_2 |>
fit(train)
preds_2 <- fit_2 |>
predict(test, type = "class") |>
pull(.pred_class)
confusion_mat = as.matrix(table(Actual_Values = test$OUTCOME, Predicted_Values = preds_2))
print(confusion_mat)
sum(preds_2 == test$OUTCOME) / length(test$OUTCOME)
parsnip_2 <- rand_forest(mtry = 15, trees = 30) |>
set_engine("ranger") |>
set_mode("classification")
workflow_2 <- workflow()
workflow_2 <- workflow_2 |>
add_model(parsnip_2) |>
add_recipe(recipe_1)
fit_2 <- workflow_2 |>
fit(train)
preds_2 <- fit_2 |>
predict(test, type = "class") |>
pull(.pred_class)
confusion_mat = as.matrix(table(Actual_Values = test$OUTCOME, Predicted_Values = preds_2))
print(confusion_mat)
sum(preds_2 == test$OUTCOME) / length(test$OUTCOME)
parsnip_2 <- rand_forest(mtry = 15, trees = 35) |>
set_engine("ranger") |>
set_mode("classification")
workflow_2 <- workflow()
workflow_2 <- workflow_2 |>
add_model(parsnip_2) |>
add_recipe(recipe_1)
fit_2 <- workflow_2 |>
fit(train)
preds_2 <- fit_2 |>
predict(test, type = "class") |>
pull(.pred_class)
confusion_mat = as.matrix(table(Actual_Values = test$OUTCOME, Predicted_Values = preds_2))
print(confusion_mat)
sum(preds_2 == test$OUTCOME) / length(test$OUTCOME)
parsnip_2 <- rand_forest(mtry = 15, trees = 32) |>
set_engine("ranger") |>
set_mode("classification")
workflow_2 <- workflow()
workflow_2 <- workflow_2 |>
add_model(parsnip_2) |>
add_recipe(recipe_1)
fit_2 <- workflow_2 |>
fit(train)
preds_2 <- fit_2 |>
predict(test, type = "class") |>
pull(.pred_class)
confusion_mat = as.matrix(table(Actual_Values = test$OUTCOME, Predicted_Values = preds_2))
print(confusion_mat)
sum(preds_2 == test$OUTCOME) / length(test$OUTCOME)
parsnip_2 <- rand_forest(mtry = 15, trees = 30) |>
set_engine("ranger") |>
set_mode("classification")
workflow_2 <- workflow()
workflow_2 <- workflow_2 |>
add_model(parsnip_2) |>
add_recipe(recipe_1)
fit_2 <- workflow_2 |>
fit(train)
preds_2 <- fit_2 |>
predict(test, type = "class") |>
pull(.pred_class)
confusion_mat = as.matrix(table(Actual_Values = test$OUTCOME, Predicted_Values = preds_2))
print(confusion_mat)
sum(preds_2 == test$OUTCOME) / length(test$OUTCOME)
parsnip_2 <- rand_forest(mtry = 15, trees = 30) |>
set_engine("ranger") |>
set_mode("classification")
workflow_2 <- workflow()
workflow_2 <- workflow_2 |>
add_model(parsnip_2) |>
add_recipe(recipe_1)
fit_2 <- workflow_2 |>
fit(train)
preds_2 <- fit_2 |>
predict(test, type = "class") |>
pull(.pred_class)
confusion_mat = as.matrix(table(Actual_Values = test$OUTCOME, Predicted_Values = preds_2))
print(confusion_mat)
sum(preds_2 == test$OUTCOME) / length(test$OUTCOME)
parsnip_5 <- nearest_neighbor(neighbors = 5) |>
set_engine("xgboost") |>
set_mode("classification")
parsnip_5 <- nearest_neighbor(neighbors = 5) |>
set_engine("knn") |>
set_mode("classification")
parsnip_5 <- nearest_neighbor(neighbors = 5) |>
set_engine("kknn") |>
set_mode("classification")
workflow_5 <- workflow()
workflow_5 <- workflow_5 |>
add_model(parsnip_5) |>
add_recipe(recipe_1)
fit_5 <- workflow_5 |>
fit(train)
preds_5 <- fit_5 |>
predict(test, type = "class") |>
pull(.pred_class)
confusion_mat = as.matrix(table(Actual_Values = test$OUTCOME, Predicted_Values = preds_5))
print(confusion_mat)
sum(preds_5 == test$OUTCOME) / length(test$OUTCOME)
parsnip_5 <- nearest_neighbor(neighbors = 10) |>
set_engine("kknn") |>
set_mode("classification")
workflow_5 <- workflow()
workflow_5 <- workflow_5 |>
add_model(parsnip_5) |>
add_recipe(recipe_1)
fit_5 <- workflow_5 |>
fit(train)
preds_5 <- fit_5 |>
predict(test, type = "class") |>
pull(.pred_class)
confusion_mat = as.matrix(table(Actual_Values = test$OUTCOME, Predicted_Values = preds_5))
print(confusion_mat)
sum(preds_5 == test$OUTCOME) / length(test$OUTCOME)
parsnip_5 <- nearest_neighbor(neighbors = 15) |>
set_engine("kknn") |>
set_mode("classification")
workflow_5 <- workflow()
workflow_5 <- workflow_5 |>
add_model(parsnip_5) |>
add_recipe(recipe_1)
fit_5 <- workflow_5 |>
fit(train)
preds_5 <- fit_5 |>
predict(test, type = "class") |>
pull(.pred_class)
confusion_mat = as.matrix(table(Actual_Values = test$OUTCOME, Predicted_Values = preds_5))
print(confusion_mat)
sum(preds_5 == test$OUTCOME) / length(test$OUTCOME)
parsnip_5 <- nearest_neighbor(neighbors = 18) |>
set_engine("kknn") |>
set_mode("classification")
workflow_5 <- workflow()
workflow_5 <- workflow_5 |>
add_model(parsnip_5) |>
add_recipe(recipe_1)
fit_5 <- workflow_5 |>
fit(train)
preds_5 <- fit_5 |>
predict(test, type = "class") |>
pull(.pred_class)
confusion_mat = as.matrix(table(Actual_Values = test$OUTCOME, Predicted_Values = preds_5))
print(confusion_mat)
sum(preds_5 == test$OUTCOME) / length(test$OUTCOME)
parsnip_5 <- nearest_neighbor(neighbors = 20) |>
set_engine("kknn") |>
set_mode("classification")
workflow_5 <- workflow()
workflow_5 <- workflow_5 |>
add_model(parsnip_5) |>
add_recipe(recipe_1)
fit_5 <- workflow_5 |>
fit(train)
preds_5 <- fit_5 |>
predict(test, type = "class") |>
pull(.pred_class)
confusion_mat = as.matrix(table(Actual_Values = test$OUTCOME, Predicted_Values = preds_5))
print(confusion_mat)
sum(preds_5 == test$OUTCOME) / length(test$OUTCOME)
parsnip_5 <- nearest_neighbor(neighbors = 17) |>
set_engine("kknn") |>
set_mode("classification")
workflow_5 <- workflow()
workflow_5 <- workflow_5 |>
add_model(parsnip_5) |>
add_recipe(recipe_1)
fit_5 <- workflow_5 |>
fit(train)
preds_5 <- fit_5 |>
predict(test, type = "class") |>
pull(.pred_class)
confusion_mat = as.matrix(table(Actual_Values = test$OUTCOME, Predicted_Values = preds_5))
print(confusion_mat)
sum(preds_5 == test$OUTCOME) / length(test$OUTCOME)
workflow_names <- c("glm")
workflow_names <- c("glm",
"rf",
"svm",
"xgboost",
"knn")
workflow_objects <- list(workflow_1,
workflow_2,
workflow_3,
workflow_4,
workflow_5)
fits <- list(fit_1,
fit_2,
fit_3,
fit_4,
fit_5)
workflows_tbl <- tibble(work_names = workflow_names,
work_objects = workflow_objects
fits = fits)
workflow_names <- c("glm",
"rf",
"svm",
"xgboost",
"knn")
workflow_objects <- list(workflow_1,
workflow_2,
workflow_3,
workflow_4,
workflow_5)
fits <- list(fit_1,
fit_2,
fit_3,
fit_4,
fit_5)
workflows_tbl <- tibble(work_names = workflow_names,
work_objects = workflow_objects,
fits = fits)
workflows_tbl
workflows_tbl_predictions <- workflows_tbl |>
mutate(pred_class = list(predict(fits,
test,
type = "class"))) |>
mutate(pred_prob = list(predict(fits,
test,
type = "prob")))
workflows_tbl_predictions <- workflows_tbl |>
mutate(pred_prob = list(predict(fits,
test,
type = "prob")))
workflows_tbl_predictions <- workflows_tbl |>
mutate(pred_prob = list(predict(fits,
test,
type = "class")))
workflows_tbl_predictions <- workflows_tbl |>
mutate(pred_prob = list(predict(fits,
test,
type = "prob")))
predict(fits, test, type = "prob")
predict(fit_1, test, type = "prob")
predict(fit_2, test, type = "prob")
predict(fit_3, test, type = "prob")
predict(fit_4, test, type = "prob")
predict(fit_5, test, type = "prob")
predict(fit_1, test, type = "prob")
predict(fit_2, test, type = "prob")
predict(fit_3, test, type = "prob")
predict(fit_4, test, type = "prob")
predict(fit_5, test, type = "prob")
workflows_tbl
workflows_tbl |>
mutate(pred_prob = list(predict(fits,
test,
type = "prob")))
workflow_names <- c("glm",
"rf",
"svm",
"xgboost",
"knn")
workflow_objects <- list(workflow_1,
workflow_2,
workflow_3,
workflow_4,
workflow_5)
# fits <- list(fit_1,
#              fit_2,
#              fit_3,
#              fit_4,
#              fit_5)
workflows_tbl <- tibble(work_names = workflow_names,
work_objects = workflow_objects)
workflow_names <- c("glm",
"rf",
"svm",
"xgboost",
"knn")
workflow_objects <- list(workflow_1,
workflow_2,
workflow_3,
workflow_4,
workflow_5)
fits <- list(fit_1,
fit_2,
fit_3,
fit_4,
fit_5)
workflows_tbl <- tibble(work_names = workflow_names,
work_objects = workflow_objects)
workflow_names <- c("glm",
"rf",
"svm",
"xgboost",
"knn")
workflow_objects <- list(workflow_1,
workflow_2,
workflow_3,
workflow_4,
workflow_5)
fits <- list(fit_1,
fit_2,
fit_3,
fit_4,
fit_5)
workflows_tbl <- tibble(work_names = workflow_names,
work_objects = workflow_objects)
workflows_tbl <-  workflows_tbl |>
rowwise() |>
mutate(fits = fits)
size(fits)
length(fits)
workflows_tbl <-  workflows_tbl |>
rowwise() |>
mutate(fits = list(fits))
workflows_tbl
workflow_names <- c("glm",
"rf",
"svm",
"xgboost",
"knn")
workflow_objects <- list(workflow_1,
workflow_2,
workflow_3,
workflow_4,
workflow_5)
fits <- list(fit_1,
fit_2,
fit_3,
fit_4,
fit_5)
workflows_tbl <- tibble(work_names = workflow_names,
work_objects = workflow_objects)
workflows_tbl <-  workflows_tbl |>
mutate(fits = fits)
workflows_tbl
workflows_tbl_predictions <- workflows_tbl |>
mutate(pred_prob = list(predict(fits,
test,
type = "prob")))
workflow_names <- c("glm",
"rf",
"svm",
"xgboost",
"knn")
workflow_objects <- list(workflow_1,
workflow_2,
workflow_3,
workflow_4,
workflow_5)
fits <- list(fit_1,
fit_2,
fit_3,
fit_4,
fit_5)
workflows_tbl <- tibble(work_names = workflow_names,
work_objects = workflow_objects)
set.seed(1)
workflows_tbl <-  workflows_tbl |>
rowwise() |>
mutate(fits = list(fit(work_objects,
train)))
workflows_tbl_predictions <- workflows_tbl |>
mutate(pred_prob = list(predict(fits,
test,
type = "prob")))
#
# workflows_tbl_predictions <- workflows_tbl_predictions |>
#   mutate(predictions = list(bind_cols(pred_class, pred_prob))) |>
#   select(-c(pred_class, pred_prob))
workflows_tbl
workflows_tbl_predictions
